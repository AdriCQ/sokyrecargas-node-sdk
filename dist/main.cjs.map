{"version":3,"sources":["../src/main.ts","../src/utils/crud.ts","../src/utils/initApi.ts","../src/utils/crypt.ts","../src/utils/localStorage.ts","../src/utils/tokenHandler.ts","../src/utils/interceptors.ts","../src/services/apps.ts","../src/services/categories.ts","../src/services/coins.ts","../src/services/currencies.ts","../src/services/offers.ts","../src/services/operators.ts","../src/services/recharges.ts","../src/services/settings.ts","../src/services/stats.ts","../src/services/users.ts","../src/types/coins.ts","../src/types/recharges.ts","../src/types/users.ts"],"sourcesContent":["import type { AxiosInstance } from 'axios';\nimport { initApi } from './utils';\nimport {\n  AppService,\n  CategoryService,\n  CoinService,\n  CurrencyService,\n  OfferService,\n  OperatorService,\n  RechargesService,\n  SettingsService,\n  StatsService,\n  UserService,\n} from './services';\n\nfunction setup(_api?: AxiosInstance) {\n  const api =\n    _api ?? initApi({ appToken: '', baseURL: 'http://localhost:8000' });\n\n  return {\n    api,\n    app: AppService(api),\n    category: CategoryService(api),\n    coin: CoinService(api),\n    currency: CurrencyService(api),\n    offer: OfferService(api),\n    operator: OperatorService(api),\n    recharge: RechargesService(api),\n    settings: SettingsService(api),\n    stats: StatsService(api),\n    user: UserService(api),\n  };\n}\n\nexport default setup;\n\n/**\n * Types\n */\nexport * from './types/apps';\nexport * from './types/categories';\nexport * from './types/coins';\nexport * from './types/currencies';\nexport * from './types/misc';\nexport * from './types/offers';\nexport * from './types/operators';\nexport * from './types/pagination';\nexport * from './types/recharges';\nexport * from './types/settings';\nexport * from './types/stats';\nexport * from './types/users';\n\n/**\n * Utils\n */\nexport * from './utils/initApi';\nexport * from './utils/interceptors';\nexport * from './utils/tokenHandler';\n","import type { AxiosInstance } from 'axios';\nimport type { IApiWrapper, IPaginatedData, IPaginationParams } from '@/types';\n\nconst multipartHeader = {\n  'Content-Type': 'multipart/form-data',\n};\n\n/**\n * generateCrud\n * @param param GenerateCrudParams\n * @returns\n */\nfunction generateCrud<\n  Model,\n  Create = Omit<Model, 'id'>,\n  Update = Partial<Create>,\n  Filter = IPaginationParams,\n>({ api, baseURL, multipart }: GenerateCrudParams) {\n  const headers = multipart\n    ? {\n        'Content-Type': 'multipart/form-data',\n      }\n    : undefined;\n\n  return {\n    list: (params?: Filter) =>\n      api.get<IPaginatedData<Model>>(baseURL, { params }),\n    show: (id: number | string) =>\n      api.get<IApiWrapper<Model>>(`${baseURL}/${id}`),\n    create: (params: Create) =>\n      api.post<IApiWrapper<Model>>(`${baseURL}`, params, { headers }),\n    update: (id: number | string, params: Update) =>\n      multipart\n        ? api.post<IApiWrapper<Model>>(`${baseURL}/${id}`, params, { headers })\n        : api.patch<IApiWrapper<Model>>(`${baseURL}/${id}`, params, {\n            headers,\n          }),\n    remove: (id: number) => api.delete(`${baseURL}/${id}`),\n  };\n}\n\n/**\n * generateCrudWithoutPaginate\n * @param param GenerateCrudParams\n * @returns\n */\nfunction generateCrudWithoutPaginate<\n  Model,\n  Create = Omit<Model, 'id'>,\n  Update = Partial<Create>,\n  Filter = undefined,\n>({ api, baseURL, multipart }: GenerateCrudParams) {\n  const headers = multipart\n    ? {\n        'Content-Type': 'multipart/form-data',\n      }\n    : undefined;\n\n  return {\n    list: (params?: Filter) =>\n      api.get<IApiWrapper<Model[]>>(baseURL, { params }),\n    show: (id: number | string) =>\n      api.get<IApiWrapper<Model>>(`${baseURL}/${id}`),\n    create: (params: Create) =>\n      api.post<IApiWrapper<Model>>(`${baseURL}`, params, { headers }),\n    update: (id: number | string, params: Update) =>\n      multipart\n        ? api.post<IApiWrapper<Model>>(`${baseURL}/${id}`, params, { headers })\n        : api.patch<IApiWrapper<Model>>(`${baseURL}/${id}`, params, {\n            headers,\n          }),\n    remove: (id: number) => api.delete(`${baseURL}/${id}`),\n  };\n}\n\ninterface GenerateCrudParams {\n  api: AxiosInstance;\n  baseURL: string;\n  multipart?: boolean;\n}\n\nexport { generateCrud, generateCrudWithoutPaginate, multipartHeader };\n","import axios from 'axios';\nimport { defaultTokenHandler, TokenHandler } from '@/utils/tokenHandler';\nimport {\n  ErrorHandlerParams,\n  useErrorHandler,\n  useHeadersInterceptor,\n} from './interceptors';\n\n/**\n * initApi\n */\nexport function initApi(params: InitApiParams) {\n  const { appToken } = params;\n\n  // token Handler init as default\n  let tokenHandler: TokenHandler = defaultTokenHandler();\n\n  // Setup token handler if exists on params\n  if (params) {\n    if (params.tokenHandler) tokenHandler = params.tokenHandler;\n  }\n\n  // Init axios instance\n  const api = axios.create({\n    baseURL: params?.baseURL,\n    withCredentials: true,\n  });\n\n  // Setup interceptors\n\n  // Header interceptors\n  const headersInterceptor = useHeadersInterceptor({\n    appToken,\n    tokenHandler,\n  });\n  api.interceptors.request.use(\n    headersInterceptor.onFulfilled,\n    headersInterceptor.onRejected,\n    headersInterceptor.options,\n  );\n\n  // Setup error handler interceptor\n  if (params?.errorHandler) {\n    const errorHandler = useErrorHandler(params.errorHandler);\n\n    // add handler interceptor\n    api.interceptors.response.use(\n      errorHandler.onFulfilled,\n      errorHandler.onRejected,\n      errorHandler.options,\n    );\n  }\n\n  return api;\n}\n\nexport interface InitApiParams {\n  appToken: string;\n  baseURL: string;\n  errorHandler?: ErrorHandlerParams;\n  tokenHandler?: TokenHandler;\n}\n","export function useCrypt<T = unknown>() {\n  return {\n    decode: (data: string): T => {\n      return JSON.parse(decodeURI(atob(data))) as T;\n    },\n    encode: (data: T) => {\n      return btoa(encodeURI(JSON.stringify(data)));\n    },\n  };\n}\n","import { useCrypt } from './crypt';\n/**\n * useStorage\n * @param key\n * @returns\n */\nexport function useStorage<T = unknown>(\n  key: string,\n  encrypted: boolean = false,\n) {\n  const { decode, encode } = useCrypt<T>();\n  return {\n    get: () => {\n      const data = localStorage.getItem(`${window.location.host}/${key}`);\n      if (data) {\n        return encrypted ? decode(data) : (JSON.parse(data) as T);\n      }\n      return null;\n    },\n    set: (data: T) => {\n      const storeData = encrypted ? encode(data) : JSON.stringify(data);\n\n      localStorage.setItem(`${window.location.host}/${key}`, storeData);\n\n      return storeData;\n    },\n    remove: () => localStorage.removeItem(`${window.location.host}/${key}`),\n  };\n}\n","import { useStorage } from './localStorage';\n\nexport interface TokenHandler {\n  set: (p: string) => void;\n  get?: () => string | null;\n  getPromise?: () => Promise<string | null>;\n}\n\n/**\n * defaultTokenHandler\n */\nexport function defaultTokenHandler(): TokenHandler {\n  const storage = useStorage<string>('auth_token', true);\n\n  return {\n    get: () => storage.get(),\n    set: (token: string) => storage.set(token),\n  };\n}\n","import type {\n  AxiosInterceptorOptions,\n  AxiosRequestHeaders,\n  AxiosResponse,\n  InternalAxiosRequestConfig,\n} from 'axios';\nimport { TokenHandler } from './tokenHandler';\n\n/**\n * useErrorHandler\n * @param params\n * @returns\n */\nexport function useErrorHandler(params: ErrorHandlerParams): InterceptorUse {\n  const { defaultError, logout, handleError } = params;\n\n  return {\n    onFulfilled: (response) => response,\n    onRejected: (error) => {\n      console.log({ requestError: error });\n\n      // Unauthenticated\n      if (error?.response?.status === 401) {\n        logout();\n        if (defaultError && defaultError.unauthorized)\n          handleError(defaultError.unauthorized);\n      }\n      if (error.response.data.errors) {\n        const errorList = Object.keys(error.response.data.errors).map((key) => [\n          key,\n          error.response.data.errors[key][0],\n        ]);\n        errorList.forEach((i) => {\n          handleError(i[1]);\n        });\n      } else if (error.response.data.data) {\n        if (typeof error.response.data.data === 'object') {\n          const errorList = Object.keys(error.response.data.data).map((key) => [\n            key,\n            error.response.data.data[key][0],\n          ]);\n          errorList.forEach((i) => {\n            // handleError(`${i[0]}: ${i[1]}`)\n            handleError(i[1]);\n          });\n        } else {\n          handleError(error.response.data.data);\n        }\n      } else if (error.response.data.message) {\n        handleError(error.response.data.message);\n      }\n      return Promise.reject(error.response);\n    },\n  };\n}\n\n/**\n * headersInterceptor\n * @param params\n * @returns\n */\nexport function useHeadersInterceptor(params: {\n  appToken: string;\n  tokenHandler: TokenHandler;\n}): InterceptorUse<InternalAxiosRequestConfig<any>> {\n  const { appToken, tokenHandler } = params;\n\n  return {\n    onFulfilled: async (_request) => {\n      let authToken: string | null = null;\n\n      if (tokenHandler.get !== undefined) authToken = tokenHandler.get();\n      else if (tokenHandler.getPromise !== undefined)\n        authToken = await tokenHandler.getPromise();\n\n      if (!(_request.headers as AxiosRequestHeaders)['App-Token']) {\n        (_request.headers as AxiosRequestHeaders)['App-Token'] = appToken;\n      }\n\n      if (!(_request.headers as AxiosRequestHeaders)['Content-Type']) {\n        (_request.headers as AxiosRequestHeaders)['Content-Type'] =\n          'application/json';\n      }\n\n      if (authToken && authToken.length > 0) {\n        /* Check if authorization is set */\n        if (!(_request.headers as AxiosRequestHeaders)['Authorization']) {\n          /* Check if the user is authenticated to send Bearer token */\n          (_request.headers as AxiosRequestHeaders).Authorization =\n            'Bearer ' + authToken;\n        }\n      }\n      return _request;\n    },\n  };\n}\n\nexport interface ErrorHandlerParams {\n  defaultError?: {\n    unauthorized: string;\n  };\n  logout: () => void;\n  handleError: (error: string) => void;\n}\n\ninterface InterceptorUse<V = AxiosResponse<any, any>> {\n  onFulfilled?: ((value: V) => V | Promise<V>) | null;\n  onRejected?: ((error: any) => any) | null;\n  options?: AxiosInterceptorOptions;\n}\n","import type { AxiosInstance } from 'axios';\nimport { generateCrudWithoutPaginate } from '@/utils';\nimport type { IApp, IAppCreateRequest, IAppUpdateRequest } from '@/types/apps';\nimport { IApiWrapper } from '@/types';\n\nexport default function (api: AxiosInstance) {\n  const baseURL: string = '/apps';\n\n  const crud = generateCrudWithoutPaginate<\n    IApp,\n    IAppCreateRequest,\n    IAppUpdateRequest\n  >({\n    api,\n    baseURL,\n  });\n  return {\n    ...crud,\n    current: () => api.get<IApiWrapper<IApp>>(`${baseURL}/current`),\n    notify: (id: number) =>\n      api.get<IApiWrapper<IApp>>(`${baseURL}/notify/${id}`),\n  };\n}\n","import type { AxiosInstance } from 'axios';\nimport type {\n  ICategory,\n  ICategoryCreateRequest,\n  ICategoryUpdateRequest,\n} from '@/types';\nimport { generateCrudWithoutPaginate } from '@/utils';\n\nexport default function (api: AxiosInstance) {\n  const baseURL: string = '/recharges/categories';\n\n  const crud = generateCrudWithoutPaginate<\n    ICategory,\n    ICategoryCreateRequest,\n    ICategoryUpdateRequest\n  >({\n    api,\n    baseURL,\n  });\n  return {\n    ...crud,\n  };\n}\n","import type { AxiosInstance } from 'axios';\nimport type {\n  IApiWrapper,\n  ICoinTopUpRequest,\n  ICoinTransaction,\n  ICoinTransactionFilterRequest,\n  ICoinTransferenceRequest,\n  IPaginatedData,\n  IPaginationParams,\n} from '@/types';\n\nexport default function (api: AxiosInstance) {\n  const baseUrl: string = '/coins/transactions';\n\n  return {\n    list: (params?: ICoinTransactionFilterRequest) =>\n      api.get<IPaginatedData<ICoinTransaction>>(baseUrl, { params }),\n    mine: (params?: IPaginationParams) =>\n      api.get<IPaginatedData<ICoinTransaction>>(`${baseUrl}/mine`, { params }),\n    topUp: (params: ICoinTopUpRequest) =>\n      api.post<IApiWrapper<ICoinTransaction>>(`${baseUrl}/top-up`, params),\n    transference: (params: ICoinTransferenceRequest) =>\n      api.post<IApiWrapper<ICoinTransaction>>(\n        `${baseUrl}/transference`,\n        params,\n      ),\n    show: (id: number) =>\n      api.get<IApiWrapper<ICoinTransaction>>(`${baseUrl}/${id}`),\n    complete: (id: number) =>\n      api.patch<IApiWrapper<ICoinTransaction>>(`${baseUrl}/${id}/complete`),\n  };\n}\n","import { AxiosInstance } from 'axios';\nimport {\n  ICurrency,\n  ICurrencyCreate,\n  ICurrencyUpdate,\n} from '@/types/currencies';\nimport { generateCrudWithoutPaginate } from '@/utils';\n\nexport default function (api: AxiosInstance) {\n  const baseURL = '/coins/currencies';\n\n  const crud = generateCrudWithoutPaginate<\n    ICurrency,\n    ICurrencyCreate,\n    ICurrencyUpdate\n  >({ baseURL, api, multipart: true });\n\n  return {\n    ...crud,\n  };\n}\n","import type { AxiosInstance } from 'axios';\nimport { generateCrudWithoutPaginate } from '@/utils';\nimport type {\n  IOffer,\n  IOfferCreateRequest,\n  IOfferFilterRequest,\n  IOfferRecharge,\n  IOfferUpdateRequest,\n} from '@/types/offers';\nimport { IApiWrapper, IRecharge } from '@/types';\n\nexport default function (api: AxiosInstance) {\n  const baseURL: string = '/recharges/offers';\n\n  const crud = generateCrudWithoutPaginate<\n    IOffer,\n    IOfferCreateRequest,\n    IOfferUpdateRequest,\n    IOfferFilterRequest\n  >({\n    api,\n    baseURL,\n    multipart: true,\n  });\n  return {\n    ...crud,\n    filterAdmin: (params: IOfferFilterRequest) =>\n      api.get<IApiWrapper<IOffer[]>>(`${baseURL}/admin`, { params }),\n    recharge: (offerId: number, params: IOfferRecharge) =>\n      api.post<IApiWrapper<IRecharge>>(\n        `${baseURL}/${offerId}/recharge`,\n        params,\n      ),\n    rechargeStacked: (offerId: number, params: IOfferRecharge) =>\n      api.post<IApiWrapper<IRecharge>>(\n        `${baseURL}/${offerId}/recharge-stacked`,\n        params,\n      ),\n  };\n}\n","import type { AxiosInstance } from 'axios';\nimport { generateCrudWithoutPaginate } from '@/utils';\nimport type { IOperator, IOperatorCreate, IOperatorUpdate } from '@/types';\n\nexport default function (api: AxiosInstance) {\n  const baseURL: string = '/recharges/operators';\n\n  const crud = generateCrudWithoutPaginate<\n    IOperator,\n    IOperatorCreate,\n    IOperatorUpdate\n  >({\n    api,\n    baseURL,\n    multipart: true,\n  });\n  return {\n    ...crud,\n  };\n}\n","import type { AxiosInstance } from 'axios';\nimport type {\n  IApiWrapper,\n  IPaginatedData,\n  IPaginationParams,\n  IRecharge,\n  IRechargeCreate,\n  IRechargeFilterRequest,\n  IRechargeUpdateRequest,\n} from '@/types';\n\nexport default function (api: AxiosInstance) {\n  const baseURL: string = '/recharges';\n\n  return {\n    /**\n     * list\n     * @param params\n     */\n    list: (params?: IRechargeFilterRequest) =>\n      api.get<IPaginatedData<IRecharge>>(baseURL, { params }),\n    /**\n     * store\n     * @param params\n     */\n    store: (params: IRechargeCreate) =>\n      api.post<IApiWrapper<IRecharge>>(baseURL, params),\n    /**\n     * mine\n     * @param params\n     */\n    mine: (params?: IPaginationParams) =>\n      api.get<IPaginatedData<IRecharge>>(`${baseURL}/mine`, {\n        params,\n      }),\n    /**\n     * show\n     * @param id\n     */\n    show: (id: number) => api.get<IApiWrapper<IRecharge>>(`${baseURL}/${id}`),\n    update: (id: number, param: IRechargeUpdateRequest) =>\n      api.patch<IApiWrapper<IRecharge>>(`${baseURL}/${id}`, param),\n  };\n}\n","import type { AxiosInstance } from 'axios';\nimport {\n  IApiWrapper,\n  ISiteBanner,\n  ISiteBannerCreate,\n  ISiteBannerUpdate,\n} from '@/types';\n\nexport default function (api: AxiosInstance) {\n  const baseURL: string = '/settings/';\n  return {\n    banners: {\n      list: async () =>\n        api.get<IApiWrapper<ISiteBanner[]>>(`${baseURL}/banners`),\n      create: (params: ISiteBannerCreate) =>\n        api.post<IApiWrapper<ISiteBanner>>(`${baseURL}/banners`, params),\n      update: (id: number, params: ISiteBannerUpdate) =>\n        api.post<IApiWrapper<ISiteBanner>>(`${baseURL}/banners/${id}`, params),\n    },\n  };\n}\n","import type { AxiosInstance } from 'axios';\nimport type { IApiWrapper, IUserStats } from '@/types';\n\nexport default function (api: AxiosInstance) {\n  const baseUrl: string = '/stats';\n\n  return {\n    mine: () => api.get<IApiWrapper<IUserStats>>(baseUrl),\n  };\n}\n","import type { AxiosInstance } from 'axios';\nimport type {\n  IApiWrapper,\n  IPaginatedData,\n  IUser,\n  IUserAuthResponse,\n  IUserFilterRequest,\n  IUserLoginRequest,\n  IUserRegisterRequest,\n  IUserUpdateRequest,\n} from '@/types';\n\nexport default function (api: AxiosInstance) {\n  const baseUrl: string = '/users';\n  const authUrl: string = baseUrl + '/auth';\n\n  return {\n    auth: {\n      /**\n       * Get current authenticated user\n       */\n      current: () => api.get<IUserAuthResponse>(`${authUrl}/current`),\n      /**\n       * Login user\n       * @param params\n       */\n      login: (params: IUserLoginRequest) =>\n        api.post<IUserAuthResponse>(`${authUrl}/login`, params),\n      /**\n       * logout\n       */\n      logout: () => api.post(`${authUrl}/logout`),\n      /**\n       * Register new User\n       * @param params\n       */\n      register: (params: IUserRegisterRequest) =>\n        api.post<IUserAuthResponse>(`${authUrl}/register`, params),\n    },\n\n    list: (params?: IUserFilterRequest) =>\n      api.get<IPaginatedData<IUser>>(baseUrl, { params }),\n    show: (id: number) => api.get<IApiWrapper<IUser>>(`${baseUrl}/${id}`),\n    update: (id: number, params: IUserUpdateRequest) =>\n      api.patch<IApiWrapper<IUser>>(`${baseUrl}/${id}`, params),\n  };\n}\n","import type { IUser } from './users';\nimport { IPaginationParams } from '@/types/pagination';\n\nexport enum CoinTransactionStatus {\n  PENDING = 'pending',\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\nexport enum CoinTransactionType {\n  WITHDRAWAL = 'withdrawal',\n  DEPOSIT = 'deposit',\n  TRANSFER = 'transfer',\n  REFUND = 'refund',\n  CONSUME = 'consume',\n}\n\nexport interface ICoinTransaction {\n  id: number;\n  fromUser: IUser;\n  toUser: IUser;\n  amount: number;\n  type: CoinTransactionType;\n  status: CoinTransactionStatus;\n  comment: string | null;\n  created_at: string | Date;\n  updated_at: string | Date | null;\n}\n\nexport interface ICoinTransferenceRequest {\n  to_user_email: string;\n  amount: number;\n  comment?: string;\n}\n\nexport type ICoinTopUpRequest = {\n  amount: number;\n  user_id?: number;\n  currency: number;\n  completed?: boolean;\n};\n\nexport interface ICoinTransactionFilterRequest extends IPaginationParams {\n  from_user_id?: number;\n  to_user_id?: number;\n  status?: CoinTransactionStatus;\n}\n","import type { IOperator } from './operators';\nimport type { IUser } from './users';\nimport { IPaginationParams } from '@/types/pagination';\n\nexport interface IRecharge {\n  id: number;\n  operator: IOperator;\n  user: IUser;\n  status: RechargeStatus;\n  amount: number;\n  recipient: string;\n  recipient_name: string;\n  created_at: string | Date | null;\n  updated_at: string | Date | null;\n}\n\nexport interface IRechargeFilterRequest extends IPaginationParams {\n  operator_id?: number;\n  user_id?: number;\n  status?: RechargeStatus;\n  recipient?: string;\n}\n\nexport enum RechargeStatus {\n  CANCELED = 'canceled',\n  COMPLETED = 'completed',\n  PENDING = 'pending',\n}\n\nexport interface IRechargeCreate {\n  amount: number;\n  operator_code: string;\n  recipient: string;\n  recipient_name: string | null;\n}\n\nexport interface IRechargeUpdateRequest {\n  status?: RechargeStatus.CANCELED;\n  recipient?: string;\n  recipient_name?: string;\n}\n","import type { IPaginationParams } from '@/types/pagination';\n\n/**\n * User\n */\nexport interface IUser {\n  id: number;\n  name: string;\n  email: string;\n  email_verified_at: string | null;\n  phone: string;\n  phone_verified_at: string | null;\n  coins: number;\n  role: UserRole;\n}\n\n/**\n * UserRole\n */\nexport enum UserRole {\n  ADMIN = 'admin',\n  GUEST = 'guest',\n}\n\nexport interface IUserFilterRequest extends IPaginationParams {\n  email?: string;\n  name?: string;\n  phone?: string;\n  role?: UserRole;\n}\n\n/**\n * Requests\n */\nexport interface IUserLoginRequest {\n  email: string;\n  password: string;\n}\n\nexport interface IUserRegisterRequest {\n  name: string;\n  email: string;\n  phone: string;\n  password: string;\n  password_confirmation: string;\n}\n\n/**\n * Responses\n */\nexport interface IUserAuthResponse {\n  data: IUser;\n  token: string;\n}\n\nexport interface IUserUpdateRequest {\n  name?: string;\n  verify_phone?: boolean;\n  verify_email?: boolean;\n  password?: string;\n  password_confirmation?: string;\n  coins?: number;\n}\n"],"mappings":"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","names":["axios","CoinTransactionStatus","CoinTransactionType","RechargeStatus","UserRole"]}